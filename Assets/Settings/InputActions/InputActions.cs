//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GamePlayingInput"",
            ""id"": ""6677874e-3e28-46d5-be90-ad126075e14d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""96e64d7e-c260-4bda-9832-8b5cc3c2d0c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse_Left"",
                    ""type"": ""Button"",
                    ""id"": ""e6d12c18-80dc-412f-bad3-14bab841a588"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse_Right"",
                    ""type"": ""Button"",
                    ""id"": ""0dbcd1be-731b-4343-bc93-044d0b4583e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0df33e8b-fefd-4bf3-a23b-a3d490f2990e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb5bc5c7-98f1-457a-afd1-f53abf29b2df"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce40a52b-db52-4eff-b64a-85dea64aa24c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a8ce9038-aa4c-4d71-9bbe-d6955626f742"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3eb3defd-d6d3-4549-b5c3-cf0878b2ab2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""048f234c-9c8a-481e-bd32-93cc4a6e6c3e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5ef8ca9-bc01-4391-943f-9ff5f3def1c9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamePausedInput"",
            ""id"": ""4c1f73fa-94e8-4306-9006-6e360e2655fa"",
            ""actions"": [
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""b5c13f43-2f02-4b95-b204-c7c6b036f5c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74711d98-32cc-48e7-9175-91388644dd5c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlayingInput
        m_GamePlayingInput = asset.FindActionMap("GamePlayingInput", throwIfNotFound: true);
        m_GamePlayingInput_Move = m_GamePlayingInput.FindAction("Move", throwIfNotFound: true);
        m_GamePlayingInput_Mouse_Left = m_GamePlayingInput.FindAction("Mouse_Left", throwIfNotFound: true);
        m_GamePlayingInput_Mouse_Right = m_GamePlayingInput.FindAction("Mouse_Right", throwIfNotFound: true);
        // GamePausedInput
        m_GamePausedInput = asset.FindActionMap("GamePausedInput", throwIfNotFound: true);
        m_GamePausedInput_Esc = m_GamePausedInput.FindAction("Esc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlayingInput
    private readonly InputActionMap m_GamePlayingInput;
    private IGamePlayingInputActions m_GamePlayingInputActionsCallbackInterface;
    private readonly InputAction m_GamePlayingInput_Move;
    private readonly InputAction m_GamePlayingInput_Mouse_Left;
    private readonly InputAction m_GamePlayingInput_Mouse_Right;
    public struct GamePlayingInputActions
    {
        private @InputActions m_Wrapper;
        public GamePlayingInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePlayingInput_Move;
        public InputAction @Mouse_Left => m_Wrapper.m_GamePlayingInput_Mouse_Left;
        public InputAction @Mouse_Right => m_Wrapper.m_GamePlayingInput_Mouse_Right;
        public InputActionMap Get() { return m_Wrapper.m_GamePlayingInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayingInputActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayingInputActions instance)
        {
            if (m_Wrapper.m_GamePlayingInputActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMove;
                @Mouse_Left.started -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Left;
                @Mouse_Left.performed -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Left;
                @Mouse_Left.canceled -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Left;
                @Mouse_Right.started -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Right;
                @Mouse_Right.performed -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Right;
                @Mouse_Right.canceled -= m_Wrapper.m_GamePlayingInputActionsCallbackInterface.OnMouse_Right;
            }
            m_Wrapper.m_GamePlayingInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Mouse_Left.started += instance.OnMouse_Left;
                @Mouse_Left.performed += instance.OnMouse_Left;
                @Mouse_Left.canceled += instance.OnMouse_Left;
                @Mouse_Right.started += instance.OnMouse_Right;
                @Mouse_Right.performed += instance.OnMouse_Right;
                @Mouse_Right.canceled += instance.OnMouse_Right;
            }
        }
    }
    public GamePlayingInputActions @GamePlayingInput => new GamePlayingInputActions(this);

    // GamePausedInput
    private readonly InputActionMap m_GamePausedInput;
    private IGamePausedInputActions m_GamePausedInputActionsCallbackInterface;
    private readonly InputAction m_GamePausedInput_Esc;
    public struct GamePausedInputActions
    {
        private @InputActions m_Wrapper;
        public GamePausedInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Esc => m_Wrapper.m_GamePausedInput_Esc;
        public InputActionMap Get() { return m_Wrapper.m_GamePausedInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePausedInputActions set) { return set.Get(); }
        public void SetCallbacks(IGamePausedInputActions instance)
        {
            if (m_Wrapper.m_GamePausedInputActionsCallbackInterface != null)
            {
                @Esc.started -= m_Wrapper.m_GamePausedInputActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_GamePausedInputActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_GamePausedInputActionsCallbackInterface.OnEsc;
            }
            m_Wrapper.m_GamePausedInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
            }
        }
    }
    public GamePausedInputActions @GamePausedInput => new GamePausedInputActions(this);
    public interface IGamePlayingInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouse_Left(InputAction.CallbackContext context);
        void OnMouse_Right(InputAction.CallbackContext context);
    }
    public interface IGamePausedInputActions
    {
        void OnEsc(InputAction.CallbackContext context);
    }
}
